// Enhanced Weather App JavaScript Code

class WeatherApp {
  constructor() {
    // this.apiKey = "9b9145c29b3cba03fd42a1f89d14f59f"; // OpenWeatherMap API key (REMOVED for security)
    this.apiKey = null; // Will be fetched securely from backend
    this.currentUnit = "celsius";
    this.searchHistory =
      JSON.parse(localStorage.getItem("weatherSearchHistory")) || [];
    this.currentWeatherData = null;

    this.initializeElements();
    this.bindEvents();
    this.loadSearchHistory();
    this.updateDateTime();

    // Fetch API key securely from backend before allowing weather fetches
    this.fetchApiKey().then(() => {
      // C·∫≠p nh·∫≠t th·ªùi gian m·ªói ph√∫t
      setInterval(() => this.updateDateTime(), 60000);
    });
  }

  initializeElements() {
    this.weatherForm = document.querySelector(".weatherForm");
    this.cityInput = document.querySelector(".cityInput");
    this.card = document.querySelector(".card");
    this.errorCard = document.querySelector(".error-card");
    this.loading = document.querySelector(".loading");
    this.recentSearches = document.querySelector(".recent-searches");
    this.searchHistoryContainer = document.querySelector(".search-history");

    // Weather display elements
    this.cityDisplay = document.querySelector(".cityDisplay");
    this.tempDisplay = document.querySelector(".tempDisplay");
    this.feelsLike = document.querySelector(".feels-like");
    this.humidityDisplay = document.querySelector(".humidityDisplay");
    this.descDisplay = document.querySelector(".descDisplay");
    this.weatherEmoji = document.querySelector(".weatherEmoji");
    this.dateTime = document.querySelector(".date-time");
    this.windDisplay = document.querySelector(".windDisplay");
    this.pressureDisplay = document.querySelector(".pressureDisplay");
    this.visibilityDisplay = document.querySelector(".visibilityDisplay");
    this.errorDisplay = document.querySelector(".errorDisplay");

    // Temperature unit buttons
    this.tempUnits = document.querySelectorAll(".temp-unit");
  }

  bindEvents() {
    this.weatherForm.addEventListener("submit", (e) =>
      this.handleFormSubmit(e)
    );

    // Temperature unit toggle
    this.tempUnits.forEach((btn) => {
      btn.addEventListener("click", (e) =>
        this.toggleTemperatureUnit(e.target.dataset.unit)
      );
    });

    // Enter key support for input
    this.cityInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        this.handleFormSubmit(e);
      }
    });
  }

  async handleFormSubmit(event) {
    event.preventDefault();

    const city = this.cityInput.value.trim();

    if (!city) {
      this.displayError("Vui l√≤ng nh·∫≠p t√™n th√†nh ph·ªë");
      return;
    }

    try {
      this.showLoading();
      const weatherData = await this.getWeatherData(city);
      this.currentWeatherData = weatherData;
      this.displayWeatherInfo(weatherData);
      this.addToSearchHistory(city);
      this.cityInput.value = "";
    } catch (error) {
      console.error("Weather fetch error:", error);
      this.displayError(this.getErrorMessage(error));
    } finally {
      this.hideLoading();
    }
  }

  async getWeatherData(city) {
    if (!this.apiKey) {
      throw new Error("API_KEY_NOT_LOADED");
    }
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.apiKey}&units=metric&lang=vi`;

    console.log(`üåê Calling API: ${apiUrl}`);

    const response = await fetch(apiUrl);

    console.log(`üì° Response status: ${response.status}`);

    if (!response.ok) {
      const errorData = await response.text();
      console.error("‚ùå API Error Response:", errorData);

      if (response.status === 404) {
        throw new Error("CITY_NOT_FOUND");
      } else if (response.status === 401) {
        throw new Error("INVALID_API_KEY");
      } else {
        throw new Error("NETWORK_ERROR");
      }
    }

    const data = await response.json();
    console.log("‚úÖ Weather data received:", data);
    return data;
  }

  displayWeatherInfo(data) {
    const {
      name: city,
      sys: { country },
      main: { temp, feels_like, humidity, pressure },
      weather: [{ description, id }],
      wind: { speed },
      visibility,
    } = data;

    this.hideError();
    this.showWeatherCard();

    // Location and time
    this.cityDisplay.textContent = `${city}, ${country}`;
    this.updateDateTime();

    // Temperature
    this.updateTemperatureDisplay(temp, feels_like);

    // Weather description and emoji
    this.descDisplay.textContent = description;
    this.weatherEmoji.textContent = this.getWeatherEmoji(id);

    // Weather details
    this.humidityDisplay.textContent = `${humidity}%`;
    this.windDisplay.textContent = `${speed} m/s`;
    this.pressureDisplay.textContent = `${pressure} hPa`;
    this.visibilityDisplay.textContent = `${(visibility / 1000).toFixed(1)} km`;

    // Add animation to weather card
    this.card.style.animation = "none";
    this.card.offsetHeight; // Trigger reflow
    this.card.style.animation = "slideIn 0.5s ease";
  }

  updateTemperatureDisplay(temp, feelsLike) {
    if (this.currentUnit === "celsius") {
      this.tempDisplay.textContent = `${Math.round(temp)}¬∞C`;
      this.feelsLike.textContent = `C·∫£m nh·∫≠n nh∆∞ ${Math.round(feelsLike)}¬∞C`;
    } else {
      const tempF = this.celsiusToFahrenheit(temp);
      const feelsLikeF = this.celsiusToFahrenheit(feelsLike);
      this.tempDisplay.textContent = `${Math.round(tempF)}¬∞F`;
      this.feelsLike.textContent = `C·∫£m nh·∫≠n nh∆∞ ${Math.round(feelsLikeF)}¬∞F`;
    }
  }

  toggleTemperatureUnit(unit) {
    if (unit === this.currentUnit) return;

    this.currentUnit = unit;

    // Update active button
    this.tempUnits.forEach((btn) => {
      btn.classList.toggle("active", btn.dataset.unit === unit);
    });

    // Update temperature display if we have data
    if (this.currentWeatherData) {
      const {
        main: { temp, feels_like },
      } = this.currentWeatherData;
      this.updateTemperatureDisplay(temp, feels_like);
    }
  }

  celsiusToFahrenheit(celsius) {
    return (celsius * 9) / 5 + 32;
  }

  getWeatherEmoji(weatherId) {
    const emojiMap = {
      // Thunderstorm
      200: "‚õàÔ∏è",
      201: "‚õàÔ∏è",
      202: "‚õàÔ∏è",
      210: "üå©Ô∏è",
      211: "üå©Ô∏è",
      212: "üå©Ô∏è",
      221: "üå©Ô∏è",
      230: "‚õàÔ∏è",
      231: "‚õàÔ∏è",
      232: "‚õàÔ∏è",
      // Drizzle
      300: "üå¶Ô∏è",
      301: "üå¶Ô∏è",
      302: "üåßÔ∏è",
      310: "üå¶Ô∏è",
      311: "üåßÔ∏è",
      312: "üåßÔ∏è",
      313: "üå¶Ô∏è",
      314: "üåßÔ∏è",
      321: "üå¶Ô∏è",
      // Rain
      500: "üå¶Ô∏è",
      501: "üåßÔ∏è",
      502: "üåßÔ∏è",
      503: "üåßÔ∏è",
      504: "üåßÔ∏è",
      511: "üå®Ô∏è",
      520: "üå¶Ô∏è",
      521: "üåßÔ∏è",
      522: "üåßÔ∏è",
      531: "üåßÔ∏è",
      // Snow
      600: "üå®Ô∏è",
      601: "‚ùÑÔ∏è",
      602: "‚ùÑÔ∏è",
      611: "üå®Ô∏è",
      612: "üå®Ô∏è",
      613: "üå®Ô∏è",
      615: "üå®Ô∏è",
      616: "üå®Ô∏è",
      620: "üå®Ô∏è",
      621: "‚ùÑÔ∏è",
      622: "‚ùÑÔ∏è",
      // Atmosphere
      701: "üå´Ô∏è",
      711: "üí®",
      721: "üå´Ô∏è",
      731: "üí®",
      741: "üå´Ô∏è",
      751: "üí®",
      761: "üí®",
      762: "üåã",
      771: "üí®",
      781: "üå™Ô∏è",
      // Clear
      800: "‚òÄÔ∏è",
      // Clouds
      801: "üå§Ô∏è",
      802: "‚õÖ",
      803: "üå•Ô∏è",
      804: "‚òÅÔ∏è",
    };

    return emojiMap[weatherId] || "‚ùì";
  }

  addToSearchHistory(city) {
    const cityName = city.trim().toLowerCase();

    // Remove if already exists
    this.searchHistory = this.searchHistory.filter(
      (item) => item.toLowerCase() !== cityName
    );

    // Add to beginning
    this.searchHistory.unshift(city.trim());

    // Keep only last 5 searches
    if (this.searchHistory.length > 5) {
      this.searchHistory = this.searchHistory.slice(0, 5);
    }

    // Save to localStorage
    localStorage.setItem(
      "weatherSearchHistory",
      JSON.stringify(this.searchHistory)
    );

    this.loadSearchHistory();
  }

  loadSearchHistory() {
    if (this.searchHistory.length === 0) {
      this.recentSearches.style.display = "none";
      return;
    }

    this.searchHistoryContainer.innerHTML = "";

    this.searchHistory.forEach((city) => {
      const historyItem = document.createElement("span");
      historyItem.className = "history-item";
      historyItem.textContent = city;
      historyItem.addEventListener("click", () => {
        this.cityInput.value = city;
        this.handleFormSubmit(new Event("submit"));
      });

      this.searchHistoryContainer.appendChild(historyItem);
    });

    this.recentSearches.style.display = "block";
  }

  updateDateTime() {
    if (this.dateTime) {
      const now = new Date();
      const options = {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      };
      this.dateTime.textContent = now.toLocaleDateString("vi-VN", options);
    }
  }

  showLoading() {
    this.loading.style.display = "block";
    this.hideWeatherCard();
    this.hideError();
  }

  hideLoading() {
    this.loading.style.display = "none";
  }

  showWeatherCard() {
    this.card.style.display = "block";
    this.hideError();
  }

  hideWeatherCard() {
    this.card.style.display = "none";
  }

  showError() {
    this.errorCard.style.display = "block";
    this.hideWeatherCard();
  }

  hideError() {
    this.errorCard.style.display = "none";
  }

  displayError(message) {
    this.errorDisplay.textContent = message;
    this.showError();
  }

  getErrorMessage(error) {
    const errorMessages = {
      CITY_NOT_FOUND:
        "üèôÔ∏è Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n th√†nh ph·ªë.",
      INVALID_API_KEY: `üîë API key kh√¥ng h·ª£p l·ªá!
        
        H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:
        1. Ki·ªÉm tra API key t·∫°i: https://home.openweathermap.org/api_keys
        2. ƒê·∫£m b·∫£o key ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)
        3. X√°c th·ª±c email n·∫øu ch∆∞a l√†m
        4. Th·ª≠ t·∫°o API key m·ªõi n·∫øu c·∫ßn
        
        API key hi·ªán t·∫°i: ${this.apiKey ? this.apiKey.substring(0, 8) : "N/A"}...`,
      NETWORK_ERROR: "üåê L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.",
      API_KEY_NOT_LOADED: "üîí Kh√¥ng th·ªÉ t·∫£i API key. Vui l√≤ng th·ª≠ l·∫°i sau.",
      default: "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
    };

    return errorMessages[error.message] || errorMessages.default;
  }
}

// Initialize the Weather App when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  new WeatherApp();
});

// Service Worker registration for PWA (optional)
// Removed because sw.js does not exist in the project, which would cause a 404 error.
// If you add a sw.js file in the future, you can restore this block.
